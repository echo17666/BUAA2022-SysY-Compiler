declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)
@a_c_num_1 = dso_local global i32 1
@a_c_num_2 = dso_local global i32 2
@a_c_num_3 = dso_local global i32 3
@a_c_num_4 = dso_local global i32 4
@a_c_num_5 = dso_local global i32 5
@a_c_num_6 = dso_local global i32 6
@a_v_num_1 = dso_local global i32 1
@a_v_num_2 = dso_local global i32 2
define dso_local void @non_param_func() {
    ret void
}
define dso_local i32 @one_param_func(i32 %v1) {
    %v2 = alloca i32
    store i32 %v1, i32* %v2
    %v3 = alloca i32
    %v4 = alloca i32
    store i32 1, i32* %v4
    %v5 = alloca i32
    store i32 2, i32* %v5
    %v6 = load i32, i32* %v2
    %v7 = add i32 %v6, 1
    ret i32 %v7
}
define dso_local i32 @two_param_func(i32 %v8, i32 %v9) {
    %v10 = alloca i32
    store i32 %v9, i32* %v10
    %v11 = alloca i32
    store i32 %v8, i32* %v11
    %v12 = load i32, i32* %v11
    %v13 = load i32, i32* %v10
    %v14 = add i32 %v12, %v13
    ret i32 %v14
}
define dso_local i32 @more_than_two_param_func(i32 %v15, i32 %v16, i32 %v17) {
    %v18 = alloca i32
    store i32 %v17, i32* %v18
    %v19 = alloca i32
    store i32 %v16, i32* %v19
    %v20 = alloca i32
    store i32 %v15, i32* %v20
    %v21 = load i32, i32* %v20
    %v22 = load i32, i32* %v19
    %v23 = add i32 %v21, %v22
    %v24 = load i32, i32* %v18
    %v25 = sub i32 %v23, %v24
    ret i32 %v25
}

define dso_local i32 @main() {
    %v26 = alloca i32
    store i32 1, i32* %v26
    %v27 = alloca i32
    store i32 2, i32* %v27
    %v28 = alloca i32
    store i32 1, i32* %v28
    %v29 = alloca i32
    %v30 = alloca i32
    %v31 = alloca i32
    store i32 3, i32* %v31
    %v32 = alloca i32
    store i32 4, i32* %v32
    %v33 = alloca i32
    store i32 5, i32* %v33
    %v34 = load i32, i32* %v30
    store i32 2, i32* %v30
    %v35 = load i32, i32* %v29
    %v36 = load i32, i32* @a_c_num_1
    %v37 = call i32 @one_param_func(i32 %v36)
    %v38 = mul i32 1, %v37
    %v39 = load i32, i32* @a_c_num_2
    %v40 = add i32 %v39, 2
    %v41 = sdiv i32 %v38, %v40
    %v42 = load i32, i32* @a_c_num_3
    %v43 = sub i32 0, %v42
    %v44 = srem i32 %v41, %v43
    %v45 = sub i32 %v44, 2
    %v46 = sub i32 0, 3
    %v47 = add i32 %v45, %v46
    store i32 %v47, i32* %v29
    %v48 = load i32, i32* %v29
    %v49 = call i32 @getint()
    store i32 %v49, i32* %v29
    call void @putch(i32 50)
    call void @putch(i32 48)
    call void @putch(i32 51)
    call void @putch(i32 55)
    call void @putch(i32 51)
    call void @putch(i32 50)
    call void @putch(i32 54)
    call void @putch(i32 48)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 95)
    call void @putch(i32 99)
    call void @putch(i32 95)
    call void @putch(i32 110)
    call void @putch(i32 117)
    call void @putch(i32 109)
    call void @putch(i32 95)
    call void @putch(i32 49)
    call void @putch(i32 58)
    %v50 = load i32, i32* @a_c_num_1
    call void @putint(i32 %v50)
    call void @putch(i32 10)
    call void @putch(i32 97)
    call void @putch(i32 95)
    call void @putch(i32 99)
    call void @putch(i32 95)
    call void @putch(i32 110)
    call void @putch(i32 117)
    call void @putch(i32 109)
    call void @putch(i32 95)
    call void @putch(i32 50)
    call void @putch(i32 58)
    %v51 = load i32, i32* @a_c_num_2
    call void @putint(i32 %v51)
    call void @putch(i32 44)
    call void @putch(i32 32)
    call void @putch(i32 97)
    call void @putch(i32 95)
    call void @putch(i32 118)
    call void @putch(i32 95)
    call void @putch(i32 110)
    call void @putch(i32 117)
    call void @putch(i32 109)
    call void @putch(i32 95)
    call void @putch(i32 50)
    call void @putch(i32 58)
    %v52 = load i32, i32* @a_v_num_2
    call void @putint(i32 %v52)
    call void @putch(i32 10)
    ret i32 0
}
